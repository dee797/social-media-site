

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id           Int             @id @default(autoincrement())
  name              String          @db.VarChar(255)
  handle            String          @db.VarChar(255) @unique
  password          String          @db.VarChar(50)
  bio               String?         @db.VarChar(500)
  profile_pic_url   String?         @db.VarChar(255)
  banner_pic_url    String?         @db.VarChar(255)
  date_joined        DateTime        @db.Date


  followers         Follow[]        @relation(name: "followed_user")
  following         Follow[]        @relation(name: "follower")
  sent_notifications Notification[] @relation(name: "sender")
  received_notifications Notification[] @relation(name: "receiver")
  posts Post[]
  likes Like[]
  reposts Repost[]
  quote_reposts Quote_Repost[]
  replies Reply[]
}

model Notification {
  notification_id       Int               @id @default(autoincrement())
  receiver              User              @relation(fields: [receiver_id], references: [user_id], name: "receiver")
  receiver_id           Int
  sender                User              @relation(fields: [sender_id], references: [user_id], name: "sender")
  sender_id             Int
  source_url            String            @db.VarChar(255)
  type                  Notification_Type  @relation(fields: [type_id], references: [notification_type_id])
  type_id               Int
  read_status           Boolean           @default(false) 
  @@unique([receiver_id, sender_id, source_url, type_id])
}

model Notification_Type {
  notification_type_id  Int     @id @default(autoincrement())
  type                  String
  notifications         Notification[]
}

model Follow {
  follow_id             Int               @id @default(autoincrement())
  followed_user         User              @relation(fields: [followed_user_id], references: [user_id], name: "followed_user")
  followed_user_id      Int
  follower              User              @relation(fields: [follower_id], references: [user_id], name: "follower")
  follower_id           Int
  @@unique([followed_user_id, follower_id])
}

model Post {
  post_id               Int               @id @default(autoincrement())
  author                User              @relation(fields: [author_id], references: [user_id])
  author_id             Int
  date_created          DateTime          @db.Timestamp
  content               String?           @db.VarChar(500)


  replies               Reply[]           @relation(name: "parent_of_reply")
  reply_parent          Reply[]           @relation(name: "reply_post")
  quotes                Quote_Repost[]     @relation(name: "parent_of_quote")
  quote_parent          Quote_Repost[]     @relation(name: "quote_post")
  likes                 Like[]
  reposts               Repost[]
}

model Like {
  like_id               Int               @id @default(autoincrement())
  post                  Post              @relation(fields: [post_id], references: [post_id])
  post_id               Int
  user                  User              @relation(fields: [user_id], references: [user_id])
  user_id               Int
  @@unique([post_id, user_id])
}

model Reply {
  reply_id              Int               @id @default(autoincrement())
  reply_post            Post              @relation(fields: [reply_post_id], references: [post_id], name: "reply_post")
  reply_post_id         Int
  parent_post           Post              @relation(fields: [parent_post_id], references: [post_id], name: "parent_of_reply")
  parent_post_id        Int
  user                  User              @relation(fields: [user_id], references: [user_id])
  user_id               Int               
  @@unique([reply_post_id, parent_post_id])
}

model Repost {
  repost_id             Int               @id @default(autoincrement())
  user                  User              @relation(fields: [user_id], references: [user_id])
  user_id               Int
  parent_post           Post              @relation(fields: [parent_post_id], references: [post_id])
  parent_post_id        Int
  @@unique([user_id, parent_post_id])
}

model Quote_Repost {
  quote_id              Int               @id @default(autoincrement())
  user                  User              @relation(fields: [user_id], references: [user_id])
  user_id               Int
  parent_post           Post              @relation(fields: [parent_post_id], references: [post_id], name: "parent_of_quote")
  parent_post_id        Int
  quote_post            Post              @relation(fields: [quote_post_id], references: [post_id], name: "quote_post")
  quote_post_id         Int
  @@unique([user_id, parent_post_id, quote_post_id])
}

